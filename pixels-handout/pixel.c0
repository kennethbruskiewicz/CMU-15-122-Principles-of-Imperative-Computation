#use <util>
#use <conio>

/* The pixel type and an interface to pixels */

typedef int pixel;       // Library (concrete) view of a pixel

// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@ensures 0 <= \result && \result<= 255;
{
  return p >> 16 & 0x000000FF;
}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@ensures 0 <= \result && \result<= 255;
{
  return p >> 8 & 0x000000FF;
}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
//@ensures 0 <= \result && \result<= 255;
{ 
  return p & 0x000000FF;
}

// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@ensures 0 <=\result && \result<= 255;
{ 
  return p >> 24 & 0x000000FF;
}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
/*@requires 0 <= alpha  && alpha <= 255 && 0 <= red  && red <= 255 
&& 0 <= green && green <= 255 && 0 <= blue && blue <= 255;
@*/
{
  int a = alpha << 24;
  int r = red << 16;
  int g = green << 8;
  int b = blue;
    return a | r | g | b;

}
//4293820205
// Do not write code below this line

// Prints a pixel to terminal
void pixel_print(pixel p) {
  print(int2hex(p));
}

typedef pixel pixel_t;   // Client (abstract) view of a pixel
